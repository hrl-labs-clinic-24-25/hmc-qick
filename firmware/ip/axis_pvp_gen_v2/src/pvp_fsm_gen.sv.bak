/**
	A module that runs a pvp plot generator using a Finite State Machine
*/

module pvp_fsm_gen  #(parameter DWELL_TIME = 10, parameter START_VAL_0 = 3, parameter STEP_SIZE = 1, parameter NUM_CYCLES = 10)
    (
		// Reset and clock.
		rstn,
		clk,

        trigger,

    	// parameter inputs.
		mosi_o,
        which_dac_o,
        readout_o
	);

/**************/
/* Parameters */
/**************/

// parameter SIZE = 16;
// parameter DWELL_TIME = 100; // will be set

/*********/
/* Ports */
/*********/
input						rstn;
reg 						rstn_0, rstn_1, rstn_2, rstn_3;
input						clk;

input                       trigger;

output 	[31:0]			    mosi_o;
output	[1:0]			    which_dac_o;
output                      readout_o;


/********************/
/* Internal signals */
/********************/

reg [31:0] mosi_0;
reg [31:0] mosi_1;
reg [31:0] mosi_2;
reg [31:0] mosi_3;

reg top_0;
reg top_1;
reg top_2;
reg top_3;

reg base_0;
reg base_1;
reg base_2;
reg base_3;

reg dac0_en;
reg dac1_en;
reg dac2_en;
reg dac3_en;

reg sendorload_trigger;


reg [3:0] curr_state, next_state;
reg [15:0] dwell_counter;   // cycle for DWELL_CYCLES

/***************/
/* FSM Machine */
/***************/

// FSM States:
		// wait -- waits for DWELL_CYCLES amount of time
// wait   -- before triggered and running the full cycle this is where the FSM rests
// s_send -- send part of the send state
// s_wait -- the machine is waiting to be set
// s_stall -- for when there are multiple dacs, to make sure that the SPI is set before continuing to run readout samples
parameter WAIT = 4'b0000, S_SEND_0 = 4'b0001, S_SEND_1 = 4'b0010, S_SEND_2 = 4'b0100, S_SEND_3 = 4'b1000, S_WAIT = 4'b1110, S_STALL = 4'b1101;

assign curr_state = next_state;
assign dac0_en = (dwell_counter == 1) & (curr_state == S_SEND_0);
assign dac1_en = (dwell_counter == 1) & (curr_state == S_SEND_1);
assign dac2_en = (dwell_counter == 1) & (curr_state == S_SEND_2);
assign dac3_en = (dwell_counter == 1) & (curr_state == S_SEND_3);

assign mosi_o      = (curr_state==S_SEND_0) ? mosi_0 : (curr_state==S_SEND_1) ? mosi_1 : (curr_state==S_SEND_2) ? mosi_2 : (curr_state==S_SEND_3) ? mosi_3 : 0;
assign which_dac_o = (curr_state==S_SEND_0) ? 0 : (curr_state==S_SEND_1) ? 1 : (curr_state==S_SEND_2) ? 2 : (curr_state==S_SEND_3) ? 3 : 0; // this is hard to debug if we're always seeing first DAC and none of second (lol)

assign readout_o = (dwell_counter > 10); // only possible in one of the readout states (dwell_counter is 0 in other states)

// FINITE STATE MACHINE
// Registers.
always @(posedge clk) begin
	rstn_3 <= 1;
	rstn_2 <= 1;
	rstn_1 <= 1;
	rstn_0 <= 1;

	if (~rstn) begin
		// State register.
		next_state 	<= WAIT;

        dwell_counter <= 0;
	end 
	else begin
		
		// State register.
		case(curr_state)
			WAIT: begin
                dwell_counter <= 0;
                
				if (trigger)  next_state <= S_STALL;
                else          next_state <= WAIT;

            end
            S_STALL: begin
                
                next_state <= S_SEND_0;
                dwell_counter <= 0;

				if      (top_3 & top_2 & top_1 & top_0) begin next_state <= WAIT; rstn_0 <= 1; rstn_1 <= 1; rstn_2 <= 1; rstn_3 <= 1; end
                else if (top_0) 					    begin 				      rstn_0 <= 1; rstn_1 <= 1; rstn_2 <= 0; rstn_3 <= 0; end
                else if (top_1) 					    begin 				      rstn_0 <= 1; rstn_1 <= 1; rstn_2 <= 0; rstn_3 <= 0; end
                else if (top_2) 					    begin 				      rstn_0 <= 1; rstn_1 <= 1; rstn_2 <= 1; rstn_3 <= 0; end

            end
			S_SEND_0: begin

				next_state <= S_SEND_0;
				
				if (dwell_counter != NUM_CYCLES) begin dwell_counter <= dwell_counter + 1; end // continue incrementing if not at the top
				else if (!top_0)				 begin dwell_counter <= 0; end
				else 							 begin dwell_counter <= 0; next_state <= S_SEND_1; end

			end
            S_SEND_1: begin

				dwell_counter <= 0;
                if (!top_1) next_state <= S_STALL;
                else        next_state <= S_SEND_2;

            end
            S_SEND_2: begin

				dwell_counter <= 0;
                if (!top_2) next_state <= S_STALL;
                else        next_state <= S_SEND_2;

            end
            S_SEND_3: begin
                
				dwell_counter <= 0;
				next_state <= S_STALL;

			end
			default: begin dwell_counter <= 0; next_state <= WAIT; end
		endcase
	end
end



no_mem_sweep 
	#(
		.DEPTH	(NUM_CYCLES)
	)
	no_mem_sweep_0 (
        .rstn		(rstn_0),
		.clk		(s_axi_aclk),
        .enable     (dac0_en),
		.start		(START_VAL_0),
        .step       (STEP_SIZE),
        .base       (base_0),
        .top        (top_0),
		.mosi		(mosi_0)
		);

no_mem_sweep 
	#(
		.DEPTH	(NUM_CYCLES)
	)
	no_mem_sweep_1 (
        .rstn		(rstn_1),
		.clk		(s_axi_aclk),
        .enable     (dac1_en),
		.start		(START_VAL_0),
        .step       (STEP_SIZE),
        .base       (base_1),
        .top        (top_1),
		.mosi		(mosi_1)
		);

no_mem_sweep 
	#(
		.DEPTH	(NUM_CYCLES)
	)
	no_mem_sweep_2 (
        .rstn		(rstn_2),
		.clk		(s_axi_aclk),
        .enable     (dac2_en),
		.start		(START_VAL_0),
        .step       (STEP_SIZE),
        .base       (base_2),
        .top        (top_2),
		.mosi		(mosi_2)
		);

no_mem_sweep 
	#(
		.DEPTH	(NUM_CYCLES)
	)
	no_mem_sweep_3 (
        .rstn		(rstn_3),
		.clk		(s_axi_aclk),
        .enable     (dac4_en),
		.start		(START_VAL_0),
        .step       (STEP_SIZE),
        .base       (base_3),
        .top        (top_3),
		.mosi		(mosi_3)
		);
        

endmodule